Parameters:
  LambdaArn:
    Description: Arn of Lambda
    Type: String
    Default: 'arn:aws:lambda:us-east-1:776773931318:function:MyLambda'
Resources: 
  ApiGatewayRestApi:  
    Type: AWS::ApiGateway::RestApi  
    Properties:  
      ApiKeySourceType: HEADER  
      Description: An API Gateway with a Lambda Integration  
      EndpointConfiguration:  
        Types:  
          - EDGE  
      Name: devops-api  
  
  ApiGatewayResource:  
    Type: AWS::ApiGateway::Resource  
    Properties:  
      ParentId: !GetAtt ApiGatewayRestApi.RootResourceId 
      PathPart: 'lambda'  
      RestApiId: !Ref ApiGatewayRestApi  
        
  ApiGatewayMethod:  
    Type: AWS::ApiGateway::Method  
    Properties:  
      ApiKeyRequired: false  
      AuthorizationType: NONE  
      HttpMethod: GET  
      Integration:  
        ConnectionType: INTERNET  
        Credentials: !GetAtt ApiGatewayIamRole.Arn  
        IntegrationHttpMethod: POST  
        PassthroughBehavior: WHEN_NO_MATCH  
        TimeoutInMillis: 29000  
        Type: AWS 
        Uri: Name: !Join 
           -''
           --'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/' 
            - !Ref LambdaArn
            - '/invocations'  
      OperationName: 'lambda'  
      ResourceId: !Ref ApiGatewayResource  
      RestApiId: !Ref ApiGatewayRestApi  
  
  ApiGatewayModel:  
    Type: AWS::ApiGateway::Model  
    Properties:  
      ContentType: 'application/json'  
      RestApiId: !Ref ApiGatewayRestApi  
      Schema: {}  
  
  ApiGatewayStage:  
    Type: AWS::ApiGateway::Stage  
    Properties:  
      DeploymentId: !Ref ApiGatewayDeployment  
      Description: Lambda API Stage v0  
      RestApiId: !Ref ApiGatewayRestApi  
      StageName: 'test'  
  
  ApiGatewayDeployment:  
    Type: AWS::ApiGateway::Deployment  
    DependsOn: ApiGatewayMethod  
    Properties:  
      Description: Lambda API Deployment  
      RestApiId: !Ref ApiGatewayRestApi  
  
  ApiGatewayIamRole:  
    Type: AWS::IAM::Role  
    Properties:  
      AssumeRolePolicyDocument:  
        Version: '2012-10-17'  
        Statement:  
          - Sid: ''  
            Effect: 'Allow'  
            Principal:  
              Service:  
                - 'apigateway.amazonaws.com'  
            Action:  
              - 'sts:AssumeRole'  
      Path: '/'  
      Policies:  
        - PolicyName: LambdaAccess  
          PolicyDocument:  
            Version: '2012-10-17'  
            Statement:  
              - Effect: 'Allow'  
                Action: 'lambda:*'  
                Resource: !Ref LambdaArn 
                 
Outputs:  
  URLValue: 
    Description: Api Endpoint 
    Value: !Sub '${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com' 